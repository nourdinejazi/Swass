// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
 }

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]

}

enum UserRole {
  ADMIN
  USER
  SUPERADMIN
}

model Address {
  id            String    @id @default(cuid())
  location String
  firstName String
  lastName String
  postalCode String
  city String
  country String
  phone String
  phone2 String?
  user   User @relation(fields: [userId], references: [id])
  userId String  @unique 
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  address       Address?
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  orders        Order[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Profile {
  id String @id @default(cuid())
  key  Int @unique
  imageFile String?
  description String?
  title String?
}






model Models {
  id String @id @default(cuid())
  name String @unique
  produit Produit []
 
}

model Categorie {
  id String @id @default(cuid())
  name String @unique
  produit Produit []
}

model Famille {
  id String @id @default(cuid())
  name String @unique
  produit Produit []
}


model Image {
  id          String   @id @default(uuid())
  produitId   Int   // Foreign Key to produit
  produit     Produit?  @relation(fields: [produitId], references: [id], onDelete: Cascade)
  path        String   @unique  // URL of the image
  index       Int      // Index of the image in the list
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tailles {
  id String @id @default(cuid())
  name String @unique
  stock Stock []
  orderItem OrderItem[]
 
}

model Couleurs {
  id String @id @default(cuid())
  code String @unique
  name String @unique
  stock Stock []
  orderItem OrderItem[]
}

model Stock {
  produit Produit  @relation(fields: [produitId], references: [id])
  produitId Int
  couleur Couleurs @relation(fields: [couleurId], references: [name])
  couleurId String
  tailles Tailles @relation(fields: [tailleId], references: [name])
  tailleId String
  stock Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  @@id([produitId, tailleId, couleurId])
}


model Produit {
  id Int @id @default(autoincrement())
  reference String @unique
  nom String
  description   String
  prix Float
  prixFinal Float?
  newCollection Boolean
  archived Boolean @default(false)
  etat String
  longeur String
  categorie Categorie? @relation(fields: [categorieId], references: [name])
  categorieId String?
  famille Famille? @relation(fields: [familleId], references: [name])
  familleId String?
  model Models? @relation(fields : [modelId], references : [name])
  modelId String?
  stock Stock[]
  orderItem OrderItem[]
  promotion  Float     
  images Image[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
 
}

model Order {
  id String @id @default(cuid())
  num Int   @default(autoincrement())
  customer   User @relation(fields: [customerId], references: [id])
  customerId String
  items OrderItem[]
  modeLivraison String
  modePaiement String
  status String @default("En attente")
  paye Boolean @default(false)
  location String
  postalCode String
  city String
  country String
  nom String
  prenom  String
  infoSupp String?
  phone String
  phone2 String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model OrderItem {
  id String @id @default(cuid())
  order   Order @relation(fields: [orderId], references: [id])
  orderId String
  product Produit @relation(fields: [ref], references: [reference])
  ref String  
  couleur Couleurs @relation(fields: [couleurId], references: [name])
  couleurId String
  taille Tailles @relation(fields: [tailleId], references: [name])
  tailleId String
  quantity Int
}


model Emails {
  id String @id @default(cuid())
  email String @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}






//  model CouleurOnProduit {
//   couleur       Couleurs     @relation(fields: [couleurId], references: [name])
//   couleurId     String  
//   produit   Produit? @relation(fields: [ProduitId], references: [id])
//   ProduitId Int  
//   stock Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt


//   @@id([couleurId, ProduitId])
// }

// model TailleOnProduit {
//   taille       Tailles     @relation(fields: [tailleId], references: [name])
//   tailleId     String  
//   produit   Produit? @relation(fields: [ProduitId], references: [id])
//   ProduitId Int    
//   stock Int
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt


//   @@id([tailleId, ProduitId])
// }